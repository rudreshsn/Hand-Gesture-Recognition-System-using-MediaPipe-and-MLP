import csv
import copy
import argparse
import itertools
import time
from collections import deque

import cv2 as cv
import numpy as np
import mediapipe as mp
from pygame import mixer

from utils import CvFpsCalc
from model import KeyPointClassifier

# Initialize audio mixer
mixer.init()
mixer.music.set_volume(0.7)

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--device", type=int, default=0)
    parser.add_argument("--width", type=int, default=960)
    parser.add_argument("--height", type=int, default=540)
    parser.add_argument('--use_static_image_mode', action='store_true')
    parser.add_argument("--min_detection_confidence", type=float, default=0.7)
    parser.add_argument("--min_tracking_confidence", type=float, default=0.5)
    return parser.parse_args()

def main():
    f1, f2, f3 = True, True, True
    args = get_args()

    cap = cv.VideoCapture(args.device)
    cap.set(cv.CAP_PROP_FRAME_WIDTH, args.width)
    cap.set(cv.CAP_PROP_FRAME_HEIGHT, args.height)

    mp_hands = mp.solutions.hands
    hands = mp_hands.Hands(
        static_image_mode=args.use_static_image_mode,
        max_num_hands=1,
        min_detection_confidence=args.min_detection_confidence,
        min_tracking_confidence=args.min_tracking_confidence,
    )

    keypoint_classifier = KeyPointClassifier()
    with open('model/keypoint_classifier/keypoint_classifier_label.csv', encoding='utf-8-sig') as f:
        keypoint_classifier_labels = [row[0] for row in csv.reader(f)]

    cvFpsCalc = CvFpsCalc(buffer_len=10)
    point_history = deque(maxlen=16)
    finger_gesture_history = deque(maxlen=16)

    mode = 0
    number = -1

    while True:
        fps = cvFpsCalc.get()
        key = cv.waitKey(10)
        if key == 27:
            break
        if 48 <= key <= 57:
            number = key - 48
        elif key == ord('n'):
            mode = 0
        elif key == ord('k'):
            mode = 1
        elif key == ord('h'):
            mode = 2

        ret, image = cap.read()
        if not ret:
            break
        image = cv.flip(image, 1)
        debug_image = copy.deepcopy(image)
        image = cv.cvtColor(image, cv.COLOR_BGR2RGB)
        image.flags.writeable = False
        results = hands.process(image)
        image.flags.writeable = True

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                landmark_list = calc_landmark_list(debug_image, hand_landmarks)
                pre_processed = pre_process_landmark(landmark_list)

                if mode == 1 and 0 <= number <= 9:
                    with open('model/keypoint_classifier/keypoint.csv', 'a', newline="") as f:
                        csv.writer(f).writerow([number, *pre_processed])

                hand_sign_id = keypoint_classifier(pre_processed)
                finger_gesture_history.append(0)

                if hand_sign_id == 0 and f1:
                    f1, f2, f3 = False, True, True
                    mixer.music.load("music/sick.mp3")
                    mixer.music.play()
                elif hand_sign_id == 1 and f2:
                    f1, f2, f3 = True, False, True
                    mixer.music.load("music/emergency.mp3")
                    mixer.music.play()
                elif hand_sign_id == 2 and f3:
                    f1, f2, f3 = True, True, False
                    mixer.music.load("music/strangers.mp3")
                    mixer.music.play()

        cv.imshow('Hand Gesture Recognition', debug_image)

    cap.release()
    cv.destroyAllWindows()

def calc_landmark_list(image, landmarks):
    image_width, image_height = image.shape[1], image.shape[0]
    return [[min(int(lm.x * image_width), image_width - 1),
             min(int(lm.y * image_height), image_height - 1)] for lm in landmarks.landmark]

def pre_process_landmark(landmark_list):
    base_x, base_y = landmark_list[0]
    temp_list = [[x - base_x, y - base_y] for x, y in landmark_list]
    flat_list = list(itertools.chain.from_iterable(temp_list))
    max_value = max(map(abs, flat_list))
    return [x / max_value for x in flat_list]

if __name__ == '__main__':
    main()
